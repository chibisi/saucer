# TODO


## Implementation

1. Do a proper re-write of RVector, RMatrix types to account for protect/unprotect errors. Also re-address the way that you deal with
   stirngs because they cause the most problems.

2. Add testing function for D compilation into the R package to run tests on D's unittest blocks. Done.

3. Re/writing containers.
    - RVectors
        - Numeric - Done
        - Ints - Done
        - Logical - Done
        - Complex - Done
        - Strings - Done
        - Names attributes - Done
        - Any attributes - Done
        - Full vector operator overloads (with caveats) - Done
        - Finalize destructor to deallocate.
    - RMatrices
        - Numeric - Done
        - Integer - Done
        - Logical - Done
        - Complex - Done
        - Strings - Done
        - Names attributes
        - Full matrix operator overloads  (with caveats)
    - Functions
        - Implementation for basic functionality - Done
        - Able to do parallelism in when called in D
    - Lists
        - Basic implementation - Done
        - Names
        - Numbers - for DataFrame compatibility
        - Indexing for names and numbers, assign and return
    - DataFrames
        - Inherit from lists?
    - Rather than just unprotecting destructors should deallocate resources.

3. "RInside"
    - Implement common `eval` functions for R inside together 
        with examples and documentation, see Rcpp's version of this for
        more details.

4. Update the compilation and add tests
    - Take another run at using Dub to compile?
    - Add compiler and compiler flag options
    - Add tests and debug the post fail-over process

5. Things to implement on the D side:
    - Environments - Done
    - Functions - see how to also eval these in D - Done
    - Multidimensional arrays > 2D

6. Multiple OS support, Linux, Windows, and Mac

7. Compiling multiple files and modules

8. Adding debug mode compilation option.

9. Cleanup wrapped R function argument names should not start with "_" - should
10. Should be able to export function overloads with different @Export() names and
    have it all work.
11. Numerics be auto-converted to integer when approriate from R, which is the expected behaviour?
12. Formally export all the `.Internal` functions so that they can be called with
    func(...) obviating the need for InternalCall(...) function.

13. Error handling for no return type given in `@Export()` function.
14. Do not wrap functions where all the parameters and 
    return types are all SEXPs.
15. Figure out spawning/parallelisation scheme for R itself using the D interface.

## Testing

1. Complete unittests on both the R and D side.
2. Memory tests valgrind
3. Performance testing.


## Caveats

1. Design choice: Static relisation of R types, hence vectors based as RVector!(SEXPTYPE)
2. Design choice with copying and constructor/destructor design


