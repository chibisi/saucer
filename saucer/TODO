# TODO


## Implementation

1. Do a proper re-write of RVector, RMatrix types to account for protect/unprotect errors. Also re-address the way that you deal with
   stirngs because they cause the most problems.

2. Add testing function for D compilation into the R package to run tests on D's unittest blocks. Done.

3. Re-writing containers.
    - RVectors
        - Floats - Done
        - Ints - Done
        - Logical - Done
        - Complex - Done
        - Strings - Done
        - Names attributes - Done
        - Any attributes - Done
        - Full vector operator overloads (with caveats) - Done
        - Finalize destructor to deallocate.
    - RMatrices
        - Floats
        - Ints
        - Logical
        - Complex
        - Strings
        - Names attributes
        - Full matrix operator overloads  (with caveats)
    - Lists
        - Names
        - Numbers - for DataFrame compatibility
        - Indexing for names and numbers, assign and return
    - DataFrames
        - Inherit from lists
    - Rather than just unprotecting destructors should deallocate resources.

3. Add pass compilation flags and compiler options to all the R functions that do compilation.

4. Things to implement on the D side:
    - Environments
    - Functions - see how to also eval these in D
    - Multidimensional arrays > 2D

5. Multiple OS support  for Windows and Mac

6. Compiling multiple files and modules

7. Adding debug mode compilation option.

8. Should I be using D's RefCounted, which auto reference counts an object so that you don't have to implement it in your object? https://dlang.org/library/std/typecons/ref_counted.html

9. Cleanup wrapped R function argument names should not start with "_" - should

## Testing

1. Complete unittests on both the R and D side.
2. Memory tests valgrind
3. Performance testing.


## Caveats

1. Design choice: Static relisation of R types, hence vectors based as RVector!(SEXPTYPE)
2. Design choice with copying and constructor/destructor design


