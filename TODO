# TODO

## Implementation

1. Do a proper re-write of RVector, RMatrix types to account for protect/unprotect errors. Also re-address the way that you deal with
   stirngs because they cause the most problems.

2. Add testing function for D compilation into the R package to run tests on D's unittest blocks. Done.

3. Re/writing containers.
    - RVectors
        - Numeric - Done
        - Ints - Done
        - Logical - Done
        - Complex - Done
        - Strings - Done
        - Names attributes - Done
        - Any attributes - Done
        - Full vector operator overloads (with caveats) - Done
        - Finalize destructor to deallocate.
    - RMatrices
        - Numeric - Done
        - Integer - Done
        - Logical - Done
        - Complex - Done
        - Strings - Done
        - Names attributes
        - Full matrix operator overloads  (with caveats)
    - Functions
        - Implementation for basic functionality - Done
        - Able to do parallelism with R functions in when called in D?
    - Lists
        - Basic implementation - Done
        - Names - Done
        - Numbers - for DataFrame compatibility
        - Indexing for names and numbers, assign and return
        - Slice the list to return another list
    - DataFrames
        - Construct from lists, arrays, rvectors, named elements, basic types, sexp. Done
        - cbind, rbind, slices (columns). Done.
    - External Pointers
    - Environments
    - Fix any outstanding bounds checking issues for all data types.
    - Un/qualified types? Since `is(const SEXP == SEXP)` how should this
      be dealt with in the implementation.

3. "RInside"
    - Flesh out the implementation or provide examples of how to use the current basic API.

4. Update the compilation and add tests
    - Dub integration.
    - Make sure that compiling multiple files and dependencies works
    - Add compiler and compiler flag options - Done.
    - Add tests and debug the post fail-over process

5. Things to implement on the D side:
    - Environments
    - Functions - see how to also eval these in D
    - Multidimensional arrays > 2D

6. Multiple OS support, Linux, Windows, and Mac?

7. Compiling
    - Multiple files/modules
    - Generate code only option (don't compile anything)
    - Capture compilation errors more gracefully, and 
        deal with `enforce` and `assert` errors gracefully.

8. Cleanup wrapped R function argument names should not start with "_" - should
9. Should be able to export function overloads with different @Export() names and
    have it all work.
11. Numerics be auto-converted to integer when approriate from R, which is the expected behaviour?
12. Formally export all the `.Internal` functions so that they can be called with
    func(...) obviating the need for InternalCall(...) function.

13. Error handling for no return type given in `@Export()` function. Done - use R_NilValue
15. Spawning R insances using D with RInside.
16. R has option for using external memory allocator with `SEXP Rf_allocVector3 (SEXPTYPE, R_xlen_t, R_allocator_t*)` function, this opens up the possibility of using D's garage collected memory allocator as well as other memory allocators available in D that would probably improve the stability integration of R's backend with D.

## Testing

1. Complete unittests on both the R and D side.
2. Memory tests valgrind
3. Performance testing.


## Caveats

1. Design choice: Static relisation of R types, hence vectors based as RVector!(SEXPTYPE)
2. Design choice with copying and constructor/destructor design


